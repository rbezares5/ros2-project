import rclpy
from rclpy.node import Node

import socket

# import custom interfaces
from interfaces.srv import RobotMovement


class robotServerNode(Node):

    def __init__(self):
        super().__init__('robot_server') #initilize the node with this name
        self.srv = self.create_service(RobotMovement, 'robot_movement_service', self.robotCallback) #type, name and callback of the service
                 

    def robotCallback(self, request, response):
        self.get_logger().info('Robot movement request acknowledged')   #receive the request
        #print('Current board state:')
        #print(request.board)

        if request.request:
            # Here we will get the information about the play and send it to the robot in order to move it accordingly
            #boardState = request.board
            #boardState

            # Create the TCP/IP sockets
            sockMoveOrigin = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sockMoveDestination = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sockPromote1 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sockCapture = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

            # Connect the sockets to the ports where the server is listening
            address='localhost'
            #address=''
            server_address1 = (address, 1010)
            server_address2 = (address, 1020)
            server_address3 = (address, 1030)
            server_address4 = (address, 1040)
            print('connecting to IP {} port {}'.format(*server_address1))
            sockMoveOrigin.connect(server_address1)
            sockMoveDestination.connect(server_address2)
            sockPromote1.connect(server_address3)
            sockCapture.connect(server_address4)

            # get information generated by the chceckers agent and construct the message to send
            move = request.move
            prom = request.promote
            cap = request.capture

            origin=bytearray([move[0],move[1]])
            destination=bytearray([move[2],move[3]])
            promote=bytearray(prom)
            capture=bytearray(cap)

            # send message
            sockMoveOrigin.sendall(origin)
            sockMoveDestination.sendall(destination)
            sockPromote1.sendall(promote)
            sockCapture.sendall(capture)

            # close sockets
            print('closing sockets')
            sockMoveOrigin.close()
            sockMoveDestination.close()
            sockPromote1.close()
            sockCapture.close()
            
            #print('Moving piece(s)...')

            #print('Piece(s) moved!')

            print('Wait for the robot to move')
            
            response.goal = True

        else:
            response.goal = False
        
        return response



def main(args=None):
    rclpy.init(args=args)

    robotServer = robotServerNode()
    rclpy.spin(robotServer)

    rclpy.shutdown()


if __name__ == '__main__':
    main()